from django.contrib.auth.models import User
from simpleapp.models import *


# Создать двух пользователей (с помощью метода User.objects.create_user).
user1 = User.objects.create_user(username="IKulibin",first_name="Иван",last_name="Кулибин",)
user2 = User.objects.create_user(username="IPetrov",first_name="Иван",last_name="Петров",)

# Дополнительно - Посмотрим пользователей
User.objects.all()
Author.objects.all()

получим датасет автора 1 и 2
Author.objects.filter(author__id = 6).values("author", "author_rating")

посмотрим всех авторов:
Author.objects.all().values("author__username", "author_rating")



# Создать два объекта модели Author, связанные с пользователями.
author1 = Author.objects.create(author=user1)
author2 = Author.objects.create(author=user2)

# Добавить 4 категории в модель Category.
category_cinema = Category.objects.create(category_name="Кино")
category_sport = Category.objects.create(category_name="Спорт")
category_auto = Category.objects.create(category_name="Авто")
category_children = Category.objects.create(category_name="Дети")

посмотрим все категории:
Category.objects.all().values('category_name')



# Добавить 2 статьи и 1 новость.
article_1 = Post.objects.create(post_author = author1, post_choise = 'AR', post_name = 'Artcile 1 title', post_text = 'Article 1 text')
article_2 = Post.objects.create(post_author = author2, post_choise = 'AR', post_name = 'Artcile 2 title', post_text = 'Article 2 text')
news_1 = Post.objects.create(post_author = author1, post_choise = 'NW', post_name = 'News title', post_text = 'News text')



# Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
article_1.post_category.add(category_cinema)
article_1.post_category.add(category_sport)
article_2.post_category.add(category_cinema)
article_2.post_category.add(category_auto)
news_1.post_category.add(category_sport)
news_1.post_category.add(category_children)


проверяем категории статей:
Post.objects.all().values('post_name', 'post_category__category_name')# работает

# Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
comment_1 = Comment.objects.create(comment_post = news_1, comment_user = user2, comment_text = 'Комментарий 1')
comment_2 = Comment.objects.create(comment_post = news_1, comment_user = user2, comment_text = 'Комментарий 2')
comment_3 = Comment.objects.create(comment_post = article_1, comment_user = user1, comment_text = 'Комментарий 3')
comment_4 = Comment.objects.create(comment_post = article_1, comment_user = user1, comment_text = 'Комментарий 4')
comment_5 = Comment.objects.create(comment_post = article_2, comment_user = user2, comment_text = 'Комментарий 5')

# проверяем комментарии:
Comment.objects.all().values('comment_post__post_name', 'comment_text', 'comment_rating')

# Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
news_1.like()
news_1.like()
news_1.dislike()
article_1.like()
article_1.like()
article_1.dislike()
article_2.dislike()
article_2.dislike()
comment_1.like()
comment_1.like()
comment_1.like()
comment_1.dislike()
comment_2.like()
comment_2.like()
comment_2.dislike()
comment_3.like()
comment_3.like()
comment_3.dislike()
comment_4.like()
comment_4.like()
comment_4.like()
comment_4.dislike()

# получаем экземляр класса и ставим ему лайк
comment_5 = Comment.objects.get(id = 5)
print(type(comment_5))
comment_5.like()
comment_5.like()
comment_5.like()

article_1 = Post.objects.get(id = 1)
article_1.like()



# проверяем рейтинги комментариев:
Comment.objects.all().values('comment_post__post_name', 'comment_text', 'comment_rating')

# Обновить рейтинги пользователей.
получим объекты автора 1 и 2
author_1 = Author.objects.get(id = 1)
author_2 = Author.objects.get(id = 2)

# Проверим авторов
print(author_1)
print(author_2)

# Обновим рейтинг
author_1.update_rating()
author_2.update_rating()


# Вывести username и рейтинг лучшего пользователя:
usernames_list = Author.objects.all().order_by('-author_rating').filter().values()
username_query = User.objects.filter(id = usernames_list[0]['id']).values('username')
user_name_query[0]['username'], usernames_list[0]['user_rating']

# Получаем id автора с максимальным рейтингом:
_author_id = list(Author.objects.all().order_by('-author_rating').values_list('author_id', flat=True))[0]
# Выводим username лучшего пользователя
User.objects.filter(id = _author_id).values('username')
# Выводим рейтинг лучшего пользователя
Author.objects.filter(author_id = _author_id).values('author_rating')


# Возьмём лучшую статью по рейтингу
post_best = 0
post_best = list(Post.objects.all().order_by('-post_rating').values_list('id', flat=True))[0]
# Проверим что нашлось:
print(post_best)
print(type(post_best))  # <class 'int'>

# Выводим
if post_best !=0:
# дату добавления
Post.objects.filter(id = post_best).values('date_in')
# username автора
Post.objects.filter(id = post_best).values('post_author__author__username')
# рейтинг
Post.objects.filter(id = post_best).values('post_rating')
# заголовок
Post.objects.filter(id = post_best).values('post_name')
# превью статьи
Post.objects.get(id = post_best).preview()


# Второй вариант:
# По стравнению с первым положительно - меньше обращений к базе данных
# отрицательно - начитываем в переменную - объект QuerySet - все статьи с сайта
# Возьмём все статьи, отсортируем по рейтингу и положим в объект QuerySet
post_list = Post.objects.all().order_by('-post_rating').filter().values()
# дату добавления
post_list[0]['date_in']
# username автора
Post.objects.filter(id = post_list[0]['id']).values('post_author__author__username')
# рейтинг
post_list[0]['post_rating']
# заголовок
post_list[0]['post_name']
# превью статьи
Post.objects.get(id = post_list[0]['id']).preview()


# Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
post_best_all_comments = Comment.objects.filter(comment_post = post_best).values('comment_date_in', 'comment_user__username', 'comment_rating', 'comment_text')
for dict in post_best_all_comments:
	print(dict['comment_date_in'], dict['comment_user__username'], dict['comment_rating'], dict['comment_text'])
